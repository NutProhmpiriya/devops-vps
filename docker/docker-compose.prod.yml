version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - frontend
      - backend
    networks:
      - app_network
    restart: always

  frontend:
    image: ${DOCKER_REGISTRY}/frontend:${TAG:-latest}
    build:
      context: ../../frontend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.yourdomain.com
    networks:
      - app_network
    restart: always
    deploy:
      replicas: 2
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s

  backend:
    image: ${DOCKER_REGISTRY}/backend:${TAG:-latest}
    build:
      context: ../../backend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=strapi_prod
      - DATABASE_USERNAME=strapi
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - app_network
    restart: always
    deploy:
      replicas: 2
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s

  postgres:
    image: postgres:13
    environment:
      - POSTGRES_DB=strapi_prod
      - POSTGRES_USER=strapi
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: always

  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data
    networks:
      - app_network
    restart: always
    command: redis-server --appendonly yes

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: