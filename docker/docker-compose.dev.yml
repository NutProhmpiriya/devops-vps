version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ../nginx/dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - app_network
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  frontend:
    image: ${DOCKER_REGISTRY:-localhost}/frontend:${TAG:-dev}
    env_file:
      - .env.development
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:1337
      - NEXT_PUBLIC_APP_ENV=develop
    networks:
      - app_network
    restart: always
    deploy:
      replicas: 2
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
        monitor: 30s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 10s
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  backend:
    image: ${DOCKER_REGISTRY:-localhost}/backend:${TAG:-dev}
    env_file:
      - .env.development
    build:
      context: ../../backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - APP_ENV=develop
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=strapi
      - DATABASE_USERNAME=strapi
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    restart: always
    deploy:
      replicas: 2
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
        monitor: 30s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 10s
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:1337/admin/login"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    env_file:
      - .env.development
    environment:
      POSTGRES_PASSWORD: "strapi123"
      POSTGRES_USER: "strapi"
      POSTGRES_DB: "strapi"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: always
    command: postgres -c shared_buffers=256MB -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U strapi"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:6-alpine
    env_file:
      - .env.development
    volumes:
      - redis_data:/data
    networks:
      - app_network
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge